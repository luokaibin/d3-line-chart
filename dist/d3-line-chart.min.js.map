{"version":3,"file":"d3-line-chart.min.js","sources":["../src/types.ts","../src/utils.ts","../src/d3-line-chart.ts"],"sourcesContent":["// 折线图配置接口\nexport interface LineChartConfig {\n  lineColor?: string;        // 折线颜色\n  showShadow?: boolean;      // 是否显示阴影\n  gridColor?: string;        // 网格线颜色\n  enableAnimation?: boolean; // 是否启用动画\n  animationDuration?: number; // 动画时长\n  axisTextColor?: string;    // 坐标轴文本颜色\n  axisTextSize?: string;     // 坐标轴文本字体大小\n  gridNumberDecimal?: number; // 网格线左侧的刻度值显示几位小数\n  margin?: {                 // 图表边距\n    top?: number;            // 上边距\n    right?: number;          // 右边距\n    bottom?: number;         // 下边距\n    left?: number;           // 左边距\n  };\n}\n\n// 数据点接口\nexport interface DataPoint {\n  x: number;\n  y: number;\n}\n\n// 关键点接口\nexport interface KeyPoint extends DataPoint {\n  render: string; // 关键点的渲染HTML\n}\n\n// 关键刻度点接口\nexport interface KeyTick {\n  x: number;\n  label: string;\n}\n\n// 默认配置\nexport const DEFAULT_CONFIG: LineChartConfig = {\n  lineColor: '#3498db',\n  showShadow: true,\n  gridColor: '#e0e0e0',\n  enableAnimation: true,\n  animationDuration: 1000,\n  axisTextColor: '#333333',\n  axisTextSize: '12px',\n  gridNumberDecimal: 0,\n  margin: {\n    top: 20,\n    right: 30,\n    bottom: 40,\n    left: 50\n  }\n};\n","import { DataPoint } from './types';\n\n/**\n * 计算点到线段的垂直距离\n * @param point 点\n * @param lineStart 线段起点\n * @param lineEnd 线段终点\n * @returns 垂直距离\n */\nexport function perpendicularDistance(point: DataPoint, lineStart: DataPoint, lineEnd: DataPoint): number {\n  if (lineStart.x === lineEnd.x) {\n    return Math.abs(point.x - lineStart.x);\n  }\n  \n  const slope = (lineEnd.y - lineStart.y) / (lineEnd.x - lineStart.x);\n  const intercept = lineStart.y - (slope * lineStart.x);\n  \n  // 点到直线的距离公式: |ax + by + c| / sqrt(a^2 + b^2)\n  // 其中直线方程为 ax + by + c = 0\n  // 转换为 y = mx + b 形式，则 a = -m, b = 1, c = -b\n  const a = -slope;\n  const b = 1;\n  const c = -intercept;\n  \n  return Math.abs(a * point.x + b * point.y + c) / Math.sqrt(a * a + b * b);\n}\n\n/**\n * Ramer-Douglas-Peucker 算法实现数据抽稀\n * @param points 原始数据点\n * @param epsilon 阈值，越小保留的点越多\n * @returns 抽稀后的数据点\n */\nexport function rdpAlgorithm(points: DataPoint[], epsilon: number): DataPoint[] {\n  if (points.length <= 2) {\n    return [...points];\n  }\n  \n  // 找到距离最远的点\n  let maxDistance = 0;\n  let maxIndex = 0;\n  \n  const firstPoint = points[0];\n  const lastPoint = points[points.length - 1];\n  \n  for (let i = 1; i < points.length - 1; i++) {\n    const distance = perpendicularDistance(points[i], firstPoint, lastPoint);\n    if (distance > maxDistance) {\n      maxDistance = distance;\n      maxIndex = i;\n    }\n  }\n  \n  // 如果最大距离大于阈值，则递归处理\n  if (maxDistance > epsilon) {\n    const leftPoints = rdpAlgorithm(points.slice(0, maxIndex + 1), epsilon);\n    const rightPoints = rdpAlgorithm(points.slice(maxIndex), epsilon);\n    \n    // 合并结果，避免重复点\n    return [...leftPoints.slice(0, -1), ...rightPoints];\n  } else {\n    // 如果最大距离小于阈值，则只保留首尾两点\n    return [firstPoint, lastPoint];\n  }\n}\n\n/**\n * 格式化大数字，如50000 -> 50K\n * @param value 数值\n * @param decimal 小数位数\n * @returns 格式化后的字符串\n */\nexport function formatLargeNumber(value: number, decimal: number = 0): string {\n  if (Math.abs(value) >= 1000000) {\n    return (value / 1000000).toFixed(decimal) + 'M';\n  } else if (Math.abs(value) >= 1000) {\n    return (value / 1000).toFixed(decimal) + 'K';\n  } else {\n    return value.toFixed(decimal);\n  }\n}\n\n/**\n * 防抖函数\n * @param fn 要执行的函数\n * @param delay 延迟时间\n * @returns 防抖处理后的函数\n */\nexport function debounce<T extends (...args: any[]) => any>(fn: T, delay: number): (...args: Parameters<T>) => void {\n  let timer: number | null = null;\n  \n  return function(this: any, ...args: Parameters<T>): void {\n    if (timer !== null) {\n      window.clearTimeout(timer);\n    }\n    \n    timer = window.setTimeout(() => {\n      fn.apply(this, args);\n      timer = null;\n    }, delay);\n  };\n}\n","import * as d3 from 'd3';\nimport { LineChartConfig, DataPoint, KeyPoint, KeyTick, DEFAULT_CONFIG } from './types';\nimport { rdpAlgorithm, formatLargeNumber, debounce } from './utils';\n\n/**\n * D3折线图Web Component\n */\nexport class D3LineChart extends HTMLElement {\n  // Shadow DOM\n  private shadow: ShadowRoot;\n  \n  // 容器元素\n  private container: HTMLDivElement;\n  private svgContainer: SVGSVGElement;\n  private canvasContainer: HTMLCanvasElement;\n  \n  // 画布上下文\n  private ctx: CanvasRenderingContext2D | null = null;\n  \n  // 数据和配置\n  private data: DataPoint[] = [];\n  private keyPoints: KeyPoint[] = [];\n  private keyTicks: KeyTick[] = [];\n  private config: LineChartConfig = { ...DEFAULT_CONFIG };\n  \n  // 尺寸和比例尺\n  private width: number = 0;\n  private height: number = 0;\n  private margin = { top: 20, right: 30, bottom: 40, left: 50 };\n  private xScale: d3.ScaleLinear<number, number> = d3.scaleLinear();\n  private yScale: d3.ScaleLinear<number, number> = d3.scaleLinear();\n  \n  // 动画相关\n  private animationProgress: number = 0;\n  private animationId: number | null = null;\n  \n  // 重绘防抖\n  private debouncedResize: () => void;\n  \n  constructor() {\n    super();\n    \n    // 创建Shadow DOM\n    this.shadow = this.attachShadow({ mode: 'open' });\n    \n    // 创建样式\n    const style = document.createElement('style');\n    style.textContent = `\n      :host {\n        display: block;\n        width: 100%;\n        height: 100%;\n      }\n      \n      .container {\n        position: relative;\n        width: 100%;\n        height: 100%;\n        overflow: hidden;\n      }\n      \n      canvas {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n      }\n      \n      svg {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        pointer-events: none;\n      }\n      \n      .key-point {\n        position: absolute;\n        transform: translate(-50%, -50%);\n        z-index: 10;\n        pointer-events: auto;\n      }\n    `;\n    \n    // 创建容器\n    this.container = document.createElement('div');\n    this.container.className = 'container';\n    \n    // 创建Canvas\n    this.canvasContainer = document.createElement('canvas');\n    this.ctx = this.canvasContainer.getContext('2d');\n    \n    // 创建SVG\n    this.svgContainer = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    \n    // 添加元素到Shadow DOM\n    this.container.appendChild(this.canvasContainer);\n    this.container.appendChild(this.svgContainer);\n    this.shadow.appendChild(style);\n    this.shadow.appendChild(this.container);\n    \n    // 初始化防抖重绘函数\n    this.debouncedResize = debounce(this.resize.bind(this), 200);\n    \n    // 监听窗口大小变化\n    this.setupResizeObserver();\n  }\n  \n  /**\n   * 当元素被添加到DOM时调用\n   */\n  connectedCallback() {\n    this.resize();\n  }\n  \n  /**\n   * 当元素从DOM中移除时调用\n   */\n  disconnectedCallback() {\n    // 清除动画\n    if (this.animationId !== null) {\n      cancelAnimationFrame(this.animationId);\n      this.animationId = null;\n    }\n  }\n  \n  /**\n   * 设置配置\n   * @param config 配置对象\n   */\n  setConfig(config: Partial<LineChartConfig>) {\n    this.config = { ...this.config, ...config };\n    \n    // 更新margin配置\n    if (config.margin) {\n      this.margin = {\n        top: config.margin.top !== undefined ? config.margin.top : this.margin.top,\n        right: config.margin.right !== undefined ? config.margin.right : this.margin.right,\n        bottom: config.margin.bottom !== undefined ? config.margin.bottom : this.margin.bottom,\n        left: config.margin.left !== undefined ? config.margin.left : this.margin.left\n      };\n    }\n    \n    this.render();\n    return this;\n  }\n  \n  /**\n   * 获取margin配置\n   */\n  getMargin(): { top: number; right: number; bottom: number; left: number } {\n    return { ...this.margin };\n  }\n  \n  /**\n   * 设置是否启用动画\n   * @param enable 是否启用\n   * @param duration 动画时长（毫秒）\n   */\n  setEnableAnimation(enable: boolean, duration?: number) {\n    this.config.enableAnimation = enable;\n    if (duration !== undefined) {\n      this.config.animationDuration = duration;\n    }\n    return this;\n  }\n  \n  /**\n   * 设置数据\n   * @param data 数据点数组\n   */\n  setData(data: DataPoint[]) {\n    this.data = [...data];\n    \n    // 重置动画进度\n    this.animationProgress = 0;\n    \n    // 更新比例尺\n    this.updateScales();\n    \n    // 渲染图表\n    this.render();\n    return this;\n  }\n  \n  /**\n   * 设置关键点\n   * @param keyPoints 关键点数组\n   */\n  setKeyPoints(keyPoints: KeyPoint[]) {\n    this.keyPoints = [...keyPoints];\n    this.render();\n    return this;\n  }\n  \n  /**\n   * 设置关键刻度点\n   * @param keyTicks 关键刻度点数组\n   */\n  setKeyTicks(keyTicks: KeyTick[]) {\n    this.keyTicks = [...keyTicks];\n    this.render();\n    return this;\n  }\n  \n  /**\n   * 获取配置\n   */\n  getConfig(): LineChartConfig {\n    return { ...this.config };\n  }\n  \n  /**\n   * 获取是否启用动画\n   */\n  getEnableAnimation(): boolean {\n    return !!this.config.enableAnimation;\n  }\n  \n  /**\n   * 获取动画时长\n   */\n  getAnimationDuration(): number {\n    return this.config.animationDuration || DEFAULT_CONFIG.animationDuration!;\n  }\n  \n  /**\n   * 获取网格线颜色\n   */\n  getGridColor(): string {\n    return this.config.gridColor || DEFAULT_CONFIG.gridColor!;\n  }\n  \n  /**\n   * 获取折线颜色\n   */\n  getLineColor(): string {\n    return this.config.lineColor || DEFAULT_CONFIG.lineColor!;\n  }\n  \n  /**\n   * 获取是否显示阴影\n   */\n  getShowShadow(): boolean {\n    return this.config.showShadow !== undefined ? this.config.showShadow : DEFAULT_CONFIG.showShadow!;\n  }\n  \n  /**\n   * 获取坐标轴文本颜色\n   */\n  getAxisTextColor(): string {\n    return this.config.axisTextColor || DEFAULT_CONFIG.axisTextColor!;\n  }\n  \n  /**\n   * 获取坐标轴文本大小\n   */\n  getAxisTextSize(): string {\n    return this.config.axisTextSize || DEFAULT_CONFIG.axisTextSize!;\n  }\n  \n  /**\n   * 获取数据\n   */\n  getData(): DataPoint[] {\n    return [...this.data];\n  }\n  \n  /**\n   * 获取关键点\n   */\n  getKeyPoints(): KeyPoint[] {\n    return [...this.keyPoints];\n  }\n  \n  /**\n   * 获取关键刻度点\n   */\n  getKeyTicks(): KeyTick[] {\n    return [...this.keyTicks];\n  }\n  \n  /**\n   * 设置ResizeObserver监听大小变化\n   */\n  private setupResizeObserver() {\n    // 使用ResizeObserver监听容器大小变化\n    const resizeObserver = new ResizeObserver(() => {\n      this.debouncedResize();\n    });\n    \n    resizeObserver.observe(this);\n    \n    // 初始调整大小\n    this.resize();\n  }\n  \n  /**\n   * 调整大小\n   */\n  private resize() {\n    const rect = this.getBoundingClientRect();\n    this.width = rect.width;\n    this.height = rect.height;\n    \n    // 设置Canvas大小\n    this.canvasContainer.width = this.width * window.devicePixelRatio;\n    this.canvasContainer.height = this.height * window.devicePixelRatio;\n    this.canvasContainer.style.width = `${this.width}px`;\n    this.canvasContainer.style.height = `${this.height}px`;\n    \n    // 调整Canvas缩放\n    if (this.ctx) {\n      this.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n    }\n    \n    // 更新比例尺\n    this.updateScales();\n    \n    // 重新渲染\n    this.render();\n  }\n  \n  /**\n   * 更新比例尺\n   */\n  private updateScales() {\n    if (this.data.length === 0) return;\n    \n    // 计算数据范围\n    const xExtent = d3.extent(this.data, d => d.x) as [number, number];\n    const yExtent = d3.extent(this.data, d => d.y) as [number, number];\n    \n    // 设置比例尺\n    this.xScale = d3.scaleLinear()\n      .domain(xExtent)\n      .range([this.margin.left, this.width - this.margin.right]);\n    \n    this.yScale = d3.scaleLinear()\n      .domain(yExtent)\n      .range([this.height - this.margin.bottom, this.margin.top]);\n  }\n  \n  /**\n   * 渲染图表\n   */\n  private render() {\n    if (!this.ctx || this.data.length === 0) return;\n    \n    // 清除画布\n    this.ctx.clearRect(0, 0, this.width, this.height);\n    \n    // 清除SVG内容\n    while (this.svgContainer.firstChild) {\n      this.svgContainer.removeChild(this.svgContainer.firstChild);\n    }\n    \n    // 移除所有关键点DOM元素\n    const keyPointElements = this.shadow.querySelectorAll('.key-point');\n    keyPointElements.forEach(el => el.remove());\n    \n    // 绘制网格线和坐标轴\n    this.drawGridAndAxis();\n    \n    // 绘制折线\n    if (this.config.enableAnimation) {\n      this.startAnimation();\n    } else {\n      this.drawLine(1);\n      this.renderKeyPoints();\n    }\n  }\n  \n  /**\n   * 绘制网格线和坐标轴\n   */\n  private drawGridAndAxis() {\n    // 创建SVG组\n    const g = d3.select(this.svgContainer);\n    \n    // 生成Y轴刻度\n    const yTicks = this.yScale.ticks(5);\n    \n    // 绘制横向网格线（Y轴网格线）\n    g.selectAll('.grid-line-y')\n      .data(yTicks)\n      .enter()\n      .append('line')\n      .attr('class', 'grid-line-y')\n      .attr('x1', this.margin.left)\n      .attr('x2', this.width - this.margin.right)\n      .attr('y1', d => this.yScale(d))\n      .attr('y2', d => this.yScale(d))\n      .attr('stroke', this.getGridColor())\n      .attr('stroke-dasharray', '3,3')\n      .attr('stroke-width', 1);\n    \n    // 绘制Y轴刻度值\n    g.selectAll('.y-axis-label')\n      .data(yTicks)\n      .enter()\n      .append('text')\n      .attr('class', 'y-axis-label')\n      .attr('x', this.margin.left - 10)\n      .attr('y', d => this.yScale(d))\n      .attr('dy', '0.32em')\n      .attr('text-anchor', 'end')\n      .attr('fill', this.getAxisTextColor())\n      .attr('font-size', this.getAxisTextSize())\n      .text(d => formatLargeNumber(d, this.config.gridNumberDecimal || 0));\n    \n    // 绘制X轴\n    g.append('line')\n      .attr('class', 'x-axis')\n      .attr('x1', this.margin.left)\n      .attr('x2', this.width - this.margin.right)\n      .attr('y1', this.height - this.margin.bottom)\n      .attr('y2', this.height - this.margin.bottom)\n      .attr('stroke', this.getGridColor())\n      .attr('stroke-dasharray', '3,3')\n      .attr('stroke-width', 1);\n    \n    // 绘制关键刻度点\n    if (this.keyTicks.length > 0) {\n      g.selectAll('.key-tick')\n        .data(this.keyTicks)\n        .enter()\n        .append('text')\n        .attr('class', 'key-tick')\n        .attr('x', d => this.xScale(d.x))\n        .attr('y', this.height - this.margin.bottom + 20)\n        .attr('text-anchor', 'middle')\n        .attr('fill', this.getAxisTextColor())\n        .attr('font-size', this.getAxisTextSize())\n        .text(d => d.label);\n    }\n  }\n  \n  /**\n   * 绘制折线\n   * @param progress 动画进度 (0-1)\n   */\n  private drawLine(progress: number) {\n    if (!this.ctx || this.data.length === 0) return;\n    \n    // 应用数据抽稀\n    const epsilon = 0.5; // 抽稀阈值\n    const simplifiedData = rdpAlgorithm(this.data, epsilon);\n    \n    // 计算动画进度对应的数据点数量\n    const dataLength = Math.floor(simplifiedData.length * progress);\n    const animatedData = simplifiedData.slice(0, dataLength);\n    \n    if (animatedData.length < 2) return;\n    \n    // 绘制折线\n    this.ctx.save();\n    this.ctx.beginPath();\n    this.ctx.moveTo(this.xScale(animatedData[0].x), this.yScale(animatedData[0].y));\n    \n    for (let i = 1; i < animatedData.length; i++) {\n      this.ctx.lineTo(this.xScale(animatedData[i].x), this.yScale(animatedData[i].y));\n    }\n    \n    this.ctx.strokeStyle = this.getLineColor();\n    this.ctx.lineWidth = 2;\n    this.ctx.stroke();\n    \n    // 绘制阴影\n    if (this.getShowShadow()) {\n      // 继续路径以闭合区域\n      this.ctx.lineTo(this.xScale(animatedData[animatedData.length - 1].x), this.height - this.margin.bottom);\n      this.ctx.lineTo(this.xScale(animatedData[0].x), this.height - this.margin.bottom);\n      this.ctx.closePath();\n      \n      // 创建渐变\n      const gradient = this.ctx.createLinearGradient(0, this.margin.top, 0, this.height - this.margin.bottom);\n      const color = this.getLineColor();\n      gradient.addColorStop(0, `${color}80`); // 50% 透明度\n      gradient.addColorStop(1, `${color}00`); // 0% 透明度\n      \n      this.ctx.fillStyle = gradient;\n      this.ctx.fill();\n    }\n    \n    this.ctx.restore();\n  }\n  \n  /**\n   * 渲染关键点\n   */\n  private renderKeyPoints() {\n    // 过滤出在坐标范围内的关键点\n    const validKeyPoints = this.keyPoints.filter(point => {\n      const x = this.xScale(point.x);\n      const y = this.yScale(point.y);\n      return (\n        x >= this.margin.left &&\n        x <= this.width - this.margin.right &&\n        y >= this.margin.top &&\n        y <= this.height - this.margin.bottom\n      );\n    });\n    \n    // 为每个关键点创建DOM元素\n    validKeyPoints.forEach(point => {\n      const keyPointElement = document.createElement('div');\n      keyPointElement.className = 'key-point';\n      keyPointElement.style.left = `${this.xScale(point.x)}px`;\n      keyPointElement.style.top = `${this.yScale(point.y)}px`;\n      keyPointElement.innerHTML = point.render;\n      \n      this.container.appendChild(keyPointElement);\n    });\n  }\n  \n  /**\n   * 开始动画\n   */\n  private startAnimation() {\n    // 清除之前的动画\n    if (this.animationId !== null) {\n      cancelAnimationFrame(this.animationId);\n      this.animationId = null;\n    }\n    \n    // 重置动画进度\n    this.animationProgress = 0;\n    \n    // 动画开始时间\n    const startTime = performance.now();\n    const duration = this.getAnimationDuration();\n    \n    // 动画函数\n    const animate = (currentTime: number) => {\n      // 计算动画进度\n      const elapsed = currentTime - startTime;\n      this.animationProgress = Math.min(elapsed / duration, 1);\n      \n      // 清除画布\n      if (this.ctx) {\n        this.ctx.clearRect(0, 0, this.width, this.height);\n      }\n      \n      // 绘制折线\n      this.drawLine(this.animationProgress);\n      \n      // 如果动画未完成，继续下一帧\n      if (this.animationProgress < 1) {\n        this.animationId = requestAnimationFrame(animate);\n      } else {\n        // 动画完成，渲染关键点\n        this.renderKeyPoints();\n        this.animationId = null;\n      }\n    };\n    \n    // 开始动画\n    this.animationId = requestAnimationFrame(animate);\n  }\n}\n\n// 注册Web Component\ncustomElements.define('d3-line-chart', D3LineChart);\n"],"names":["DEFAULT_CONFIG","lineColor","showShadow","gridColor","enableAnimation","animationDuration","axisTextColor","axisTextSize","gridNumberDecimal","margin","top","right","bottom","left","perpendicularDistance","point","lineStart","lineEnd","x","Math","abs","slope","y","a","c","sqrt","b","rdpAlgorithm","points","epsilon","length","maxDistance","maxIndex","firstPoint","lastPoint","i","distance","leftPoints","slice","rightPoints","D3LineChart","HTMLElement","constructor","super","this","ctx","data","keyPoints","keyTicks","config","width","height","xScale","d3","scaleLinear","yScale","animationProgress","animationId","shadow","attachShadow","mode","style","document","createElement","textContent","container","className","canvasContainer","getContext","svgContainer","createElementNS","appendChild","debouncedResize","fn","delay","timer","args","window","clearTimeout","setTimeout","apply","debounce","resize","bind","setupResizeObserver","connectedCallback","disconnectedCallback","cancelAnimationFrame","setConfig","undefined","render","getMargin","setEnableAnimation","enable","duration","setData","updateScales","setKeyPoints","setKeyTicks","getConfig","getEnableAnimation","getAnimationDuration","getGridColor","getLineColor","getShowShadow","getAxisTextColor","getAxisTextSize","getData","getKeyPoints","getKeyTicks","ResizeObserver","observe","rect","getBoundingClientRect","devicePixelRatio","scale","xExtent","extent","d","yExtent","domain","range","clearRect","firstChild","removeChild","querySelectorAll","forEach","el","remove","drawGridAndAxis","startAnimation","drawLine","renderKeyPoints","g","select","yTicks","ticks","selectAll","enter","append","attr","text","value","decimal","toFixed","formatLargeNumber","label","progress","simplifiedData","dataLength","floor","animatedData","save","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","closePath","gradient","createLinearGradient","color","addColorStop","fillStyle","fill","restore","filter","keyPointElement","innerHTML","startTime","performance","now","animate","currentTime","elapsed","min","requestAnimationFrame","customElements","define"],"mappings":"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"}